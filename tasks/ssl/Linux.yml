---
- name: Check if local key exists
  stat:
    path: '{{ ls_local_key_path }}'
  delegate_to: '{{ ls_local_certs | ternary("localhost", inventory_hostname) }}'
  register: key_file
  when: ls_local_certs

- name: Check if local cert exists
  stat:
    path: '{{ ls_local_cert_path }}'
  delegate_to: '{{ ls_local_certs | ternary("localhost", inventory_hostname) }}'
  register: cert_file
  when: ls_local_certs

- name: Copy key file
  copy:
    src: '{{ ls_local_key_path }}'
    dest: '{{ ls_key_path }}'
    owner: root
    group: root
    mode: 0644
    remote_src: '{{ not ls_local_certs }}'
  become: True
  when: key_file.stat.exists

- name: Copy cert file
  copy:
    src: '{{ ls_local_cert_path }}'
    dest: '{{ ls_cert_path }}'
    owner: root
    group: root
    mode: 0644
    remote_src: '{{ not ls_local_certs }}'
  become: True
  when: cert_file.stat.exists

- name: Check if key exists
  stat:
    path: '{{ ls_key_path }}/{{ ls_ssl_key_file_name }}'
  register: key_file
  become: True

- name: Check if cert exists
  stat:
    path: '{{ ls_cert_path }}/{{ ls_ssl_cert_file_name }}'
  register: cert_file
  become: True

- block:
    - name: Install pip packages
      pip:
        name:
          - pyOpenSSL
        state: present
        extra_args: --upgrade
      register: package_install
      until: package_install is succeeded

    - name: Create private certificate
      openssl_privatekey:
        path: '{{ ls_key_path }}/{{ ls_ssl_key_file_name }}'
        size: '{{ ls_ssl_key_size | int }}'

    - name: Create CSR
      openssl_csr:
        path: '/tmp/{{ ls_ssl_cert_file_name }}.csr'
        privatekey_path: '{{ ls_key_path }}/{{ ls_ssl_key_file_name }}'
        common_name: '{{ ls_ca_domain }}'

    - name: Create certificates for keystore
      openssl_certificate:
        csr_path: '/tmp/{{ ls_ssl_cert_file_name }}.csr'
        path: '{{ ls_cert_path }}/{{ ls_ssl_cert_file_name }}'
        privatekey_path: '{{ ls_key_path }}/{{ ls_ssl_key_file_name }}'
        provider: '{{ ls_ssl_certificate_provider }}'
        force: True

  when:
    - not key_file.stat.exists
    - not cert_file.stat.exists
  become: True

#Elasticsearch Local SSL cacert pem file.
- name: Check if Elasticsearch local cacert exists
  stat:
    path: '{{ es_local_ssl_cacert }}'
  delegate_to: '{{ ls_local_certs | ternary("localhost", inventory_hostname) }}'
  register: es_cacert_file
  when: ls_local_certs and ls_enable_ssl

- name: Upload Elasticsearch local cacert file
  copy:
    src: '{{ es_local_ssl_cacert }}'
    dest: '{{ ls_cert_path }}'
    owner: root
    group: root
    mode: 0644
#    remote_src: '{{ not ls_local_certs }}'
  become: True
  when: ls_local_certs and es_ssl

#Elasticsearch Local ES Keystore And trustore files
- name: Check if Elasticsearch local cacert exists
  stat:
    path: '{{ es_local_ssl_cacert }}'
  delegate_to: '{{ ls_local_certs | ternary("localhost", inventory_hostname) }}'
  register: es_keystore_file
  when: ls_local_certs and es_pki

- name: Upload Elasticsearch local keystore file
  copy:
    src: '{{ es_local_keystore }}'
    dest: '{{ ls_cert_path }}'
    owner: root
    group: root
    mode: 0644
  #    remote_src: '{{ not ls_local_certs }}'
  become: True
  when: ls_local_certs and es_pki and es_local_keystore

- name: Upload Elasticsearch local truststore file
  copy:
    src: '{{ es_local_truststore }}'
    dest: '{{ ls_cert_path }}'
    owner: root
    group: root
    mode: 0644
  #    remote_src: '{{ not ls_local_certs }}'
  become: True
  when: ls_local_certs and es_pki and es_local_truststore
